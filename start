**Act as an expert senior frontend developer specializing in React, TypeScript, and modern web architecture.**

Your task is to build a complete "Immersive Clock" application from scratch using React and Vite. The final application must be well-structured, performant, and highly maintainable. You will create the entire project structure and provide the full code for each file.

**Project Vision:**
A minimalist, elegant, full-screen clock application designed for large touch displays in educational settings. It features three modes: Clock, Countdown, and Stopwatch. The UI is driven by a Heads-Up Display (HUD) that appears on interaction and fades out automatically. The project must be built with future scalability in mind, specifically for adding a "Classroom Steward" remote control feature.

---

### **1. Core Requirements & Technology Stack**

- **Framework/Tooling:** React 18+ with Vite
- **Language:** TypeScript (`.tsx` for components, `.ts` for logic)
- **State Management:** React Context API with the `useReducer` hook for all global state (current mode, timer states, HUD visibility).
- **Routing:** `react-router-dom` to handle the main page (`/`) and a future remote control page (`/remote`).
- **Styling:** CSS Modules (`.module.css`) for component-scoped styles. A global CSS file for variables and base styles. The design should be clean, modern, and dark-themed.
- **Icons:** `react-feather` library for all icons.
- **Performance:** Use `requestAnimationFrame` for all high-frequency timers (Clock, Stopwatch, Countdown) to ensure smooth, non-blocking updates.
- **Audio:** Native `Audio` API for the countdown completion sound.
- **Future-proofing:** The state structure and component architecture should be designed to easily integrate a WebSocket-based remote control feature later.

---

### **2. Project Structure**

Please create the following file structure and then provide the code for each file.

```
/immersive-clock-react
├── public/
│   └── ding.mp3  (You don't need to generate this file, just assume it exists)
├── src/
│   ├── assets/
│   │   └── (empty for now)
│   ├── components/
│   │   ├── Clock/
│   │   │   ├── Clock.tsx
│   │   │   └── Clock.module.css
│   │   ├── Countdown/
│   │   │   ├── Countdown.tsx
│   │   │   └── Countdown.module.css
│   │   ├── Stopwatch/
│   │   │   ├── Stopwatch.tsx
│   │   │   └── Stopwatch.module.css
│   │   ├── HUD/
│   │   │   ├── HUD.tsx
│   │   │   └── HUD.module.css
│   │   ├── ControlBar/
│   │   │   ├── ControlBar.tsx
│   │   │   └── ControlBar.module.css
│   │   ├── ModeSelector/
│   │   │   ├── ModeSelector.tsx
│   │   │   └── ModeSelector.module.css
│   │   ├── CountdownModal/
│   │   │   ├── CountdownModal.tsx
│   │   │   └── CountdownModal.module.css
│   ├── contexts/
│   │   └── AppContext.tsx
│   ├── hooks/
│   │   ├── useTimer.ts
│   │   ├── useFullscreen.ts
│   │   └── useAudio.ts
│   ├── pages/
│   │   ├── ClockPage/
│   │   │   ├── ClockPage.tsx
│   │   │   └── ClockPage.module.css
│   │   └── RemotePage/
│   │       ├── RemotePage.tsx
│   │       └── RemotePage.module.css
│   ├── styles/
│   │   ├── global.css
│   │   └── variables.css
│   ├── types/
│   │   └── index.ts
│   ├── utils/
│   │   └── formatTime.ts
│   ├── App.tsx
│   └── main.tsx
├── .gitignore
├── index.html
├── package.json
├── tsconfig.json
└── vite.config.ts
```

---

### **3. Detailed File-by-File Implementation Instructions**

**`package.json`**
- Include dependencies: `react`, `react-dom`, `react-router-dom`, `react-feather`.
- Include devDependencies: `@types/react`, `@types/react-dom`, `@vitejs/plugin-react`, `typescript`, `vite`.
- Add scripts: `dev`, `build`, `preview`.

**`vite.config.ts`**
- Standard Vite configuration for a React + TypeScript project.

**`tsconfig.json`**
- A standard, strict `tsconfig.json` for a React/Vite project.

**`index.html`**
- Minimal HTML with a `<div id="root"></div>` and a link to `main.tsx`. Include basic meta tags (viewport, charset). Add a title: "Immersive Clock".

**`src/styles/variables.css`**
- Define all CSS custom properties for colors, fonts, and sizes.
  - `--background-color: #121212;`
  - `--text-color: #E0E0E0;`
  - `--primary-color: #FFFFFF;`
  - `--secondary-color: #BBBBBB;`
  - `--accent-color: #03DAC6;`
  - `--warning-color: #CF6679;`
  - `--hud-background: rgba(40, 40, 40, 0.9);`
  - `--font-main: 'Roboto Mono', monospace;`
  - `--font-ui: 'Inter', sans-serif;`

**`src/styles/global.css`**
- Import `variables.css`.
- Apply base styles: `box-sizing: border-box`, `margin: 0`, `padding: 0`.
- Set body background, color, and font-family using the CSS variables.
- Ensure the app takes up the full viewport height and width.

**`src/types/index.ts`**
- Define the main application types.
  - `export type AppMode = 'clock' | 'countdown' | 'stopwatch';`

**`src/utils/formatTime.ts`**
- Create utility functions for formatting time.
  - `formatClock(date: Date): string` -> `HH:MM:SS`
  - `formatTimer(totalSeconds: number): string` -> `MM:SS` for values under 1 hour, `HH:MM:SS` for values over 1 hour.

**`src/hooks/useTimer.ts`**
- A custom hook for precise timing.
- Signature: `useTimer(callback: () => void, isActive: boolean)`
- Internally, it must use `requestAnimationFrame` for the loop. Use `useRef` to store the animation frame ID. It should start the loop when `isActive` is true and stop it when false.

**`src/hooks/useFullscreen.ts`**
- Encapsulates the Fullscreen API.
- Signature: `useFullscreen(): [boolean, () => void]`
- Returns a boolean `isFullscreen` and a `toggleFullscreen` function. Handles vendor prefixes.

**`src/hooks/useAudio.ts`**
- Manages an audio element.
- Signature: `useAudio(src: string): [() => void, boolean]`
- Returns a `play` function and a `isReady` boolean. It should handle preloading the audio.

**`src/contexts/AppContext.tsx`**
- This is the core of the state management.
- Define `AppState`: `{ mode: AppMode, isHudVisible: boolean, countdown: { initialTime: number, currentTime: number, isActive: boolean }, stopwatch: { elapsedTime: number, isActive: boolean }, isModalOpen: boolean }`.
- Define `AppAction` types: `SET_MODE`, `TOGGLE_HUD`, `SET_COUNTDOWN`, `START_COUNTDOWN`, `PAUSE_COUNTDOWN`, `RESET_COUNTDOWN`, `TICK_COUNTDOWN`, `START_STOPWATCH`, `PAUSE_STOPWATCH`, `RESET_STOPWATCH`, `TICK_STOPWATCH`, `OPEN_MODAL`, `CLOSE_MODAL`.
- Create a `reducer` function to handle all these actions.
- Create an `AppContextProvider` component that wraps its children with the state and dispatch contexts.

**`src/main.tsx`**
- Import `React`, `ReactDOM`, `App`, `BrowserRouter`.
- Render `<BrowserRouter><App /></BrowserRouter>` into the root element.

**`src/App.tsx`**
- Import `AppContextProvider`.
- Set up `Routes` from `react-router-dom`.
- Route `/` should render `<ClockPage />`.
- Route `/remote` should render `<RemotePage />`.
- Wrap the `Routes` component with `AppContextProvider`.

**`src/pages/ClockPage/ClockPage.tsx` & `.module.css`**
- The main view of the application.
- Use `useContext` to get `dispatch`.
- It should have a main container div that listens for a `click` event. This click should dispatch `TOGGLE_HUD` and set a timeout to hide the HUD again after 8 seconds.
- It will render the main time display area and the `HUD` component.
- The `TimeDisplay` area will conditionally render `<Clock />`, `<Countdown />`, or `<Stopwatch />` based on the `mode` from the context.
- It will also conditionally render `<CountdownModal />` based on `isModalOpen` from the context.

**Component Implementations (`src/components/...`)**

- For each component, create the `.tsx` file and its corresponding `.module.css` file. Use the module styles for all class names.

- **`Clock.tsx`**: Displays the current time. Uses `useTimer` to update every second. Formats time with `formatClock`.

- **`Countdown.tsx`**: Displays the countdown time.
  - Reads `currentTime` and `isActive` from the `AppContext`.
  - Uses `useTimer` to dispatch `TICK_COUNTDOWN` every second when `isActive`.
  - Applies a special warning style (e.g., color red, subtle pulse animation) when `currentTime` is 10 seconds or less.
  - When `currentTime` reaches 0, it should stop the timer and call the `play` function from `useAudio`.
  - The time display itself should be clickable to dispatch `OPEN_MODAL`.

- **`Stopwatch.tsx`**: Displays the stopwatch time.
  - Reads `elapsedTime` and `isActive` from context.
  - Uses `useTimer` to dispatch `TICK_STOPWATCH` (e.g., every 10ms for accuracy) when `isActive`.
  - Displays formatted time `MM:SS`, hiding milliseconds for clarity.

- **`HUD.tsx`**: The main control interface.
  - Reads `isHudVisible` from context.
  - Renders `<ModeSelector />` and `<ControlBar />`.
  - The component itself should have a fade-in/fade-out transition based on its visibility.

- **`ModeSelector.tsx`**: Top part of the HUD.
  - Renders three buttons: "时钟", "倒计时", "秒表".
  - Reads the current `mode` from context to apply an 'active' style to the correct button.
  - Each button's `onClick` should dispatch `SET_MODE` with the corresponding mode.

- **`ControlBar.tsx`**: Bottom part of the HUD.
  - Conditionally renders controls based on the current `mode`.
  - **Countdown Controls:** "开始/暂停", "重置". These dispatch `START_COUNTDOWN`, `PAUSE_COUNTDOWN`, `RESET_COUNTDOWN`.
  - **Stopwatch Controls:** "开始/暂停", "重置". These dispatch `START_STOPWATCH`, `PAUSE_STOPWATCH`, `RESET_STOPWATCH`.
  - All modes have a **Fullscreen** button that uses the `useFullscreen` hook. The icon should dynamically change between `maximize` and `minimize` from `react-feather`.

- **`CountdownModal.tsx`**: The popup for setting countdown time.
  - It should be a full-screen overlay with a centered content box.
  - Manages its own local state for hours, minutes, and seconds being set.
  - Has `+` and `-` buttons for each time unit.
  - Has preset buttons: 10m, 30m, 1h, 1h15m, 2h.
  - The "确认" button calculates the total seconds from the local state and dispatches `SET_COUNTDOWN` with the value, then dispatches `CLOSE_MODAL`.
  - Clicking the background overlay should also close the modal.

**`src/pages/RemotePage/RemotePage.tsx`**
- For now, this can be a placeholder page.
- Display a title "远程控制 (开发中)" and a brief description. This sets up the routing for future development.

Please generate the complete, runnable code for every file listed in the structure. Ensure the code is clean, well-commented where necessary, and follows all best practices for React with TypeScript. Start now.